//
// ExtendedImpactCategoryRewardSelection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Impact Category Charity and Reward Unit selection with additional details */
public struct ExtendedImpactCategoryRewardSelection: Codable, JSONEncodable, Hashable {

    public var impactCategoryId: String
    public var charityId: String
    public var charityRewardUnitId: String?
    public var rewardUnitId: String
    /** Name of the reward unit */
    public var rewardUnitName: String
    /** Is Impact Category enabled for a customer */
    public var enabled: Bool?

    public init(impactCategoryId: String, charityId: String, charityRewardUnitId: String? = nil, rewardUnitId: String, rewardUnitName: String, enabled: Bool? = nil) {
        self.impactCategoryId = impactCategoryId
        self.charityId = charityId
        self.charityRewardUnitId = charityRewardUnitId
        self.rewardUnitId = rewardUnitId
        self.rewardUnitName = rewardUnitName
        self.enabled = enabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case impactCategoryId
        case charityId
        case charityRewardUnitId
        case rewardUnitId
        case rewardUnitName
        case enabled
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(impactCategoryId, forKey: .impactCategoryId)
        try container.encode(charityId, forKey: .charityId)
        try container.encodeIfPresent(charityRewardUnitId, forKey: .charityRewardUnitId)
        try container.encode(rewardUnitId, forKey: .rewardUnitId)
        try container.encode(rewardUnitName, forKey: .rewardUnitName)
        try container.encodeIfPresent(enabled, forKey: .enabled)
    }
}

