//
// CreateAnalyticsEventRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAnalyticsEventRequest: Codable, JSONEncodable, Hashable {

    /** Universally unique event ID */
    public var id: String
    /** Unique session ID for the user session, links multiple events together */
    public var sessionId: String?
    /** The event type */
    public var type: String
    /** Freeform event context to enhance information. Will be passed as-is to analytics processor. */
    public var context: String?
    /** Datetime the event was triggered */
    public var eventDate: Date?

    public init(id: String, sessionId: String? = nil, type: String, context: String? = nil, eventDate: Date? = nil) {
        self.id = id
        self.sessionId = sessionId
        self.type = type
        self.context = context
        self.eventDate = eventDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sessionId
        case type
        case context
        case eventDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(eventDate, forKey: .eventDate)
    }
}

