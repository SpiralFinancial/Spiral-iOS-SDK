//
// GivingCharityRecurringDonationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GivingCharityRecurringDonationResponse: Codable, JSONEncodable, Hashable {

    static let donationAmountRule = NumericRule<Double>(minimum: 0.01, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** External account ID donation is made from */
    public var accountId: String
    /** Spiral ID of Charity to donate to */
    public var charityId: String
    /** Recurring donation start datetime */
    public var startDate: Date
    /** Dollar value that is donated to Charity */
    public var donationAmount: Double
    /** Is recurring donation paused */
    public var isPaused: Bool
    /** Is recurring donation stopped */
    public var isStopped: Bool
    /** Is recurring donation anonymous */
    public var isAnonymous: Bool
    /** Does customer agree to cover donation fees */
    public var coverFees: Bool
    /** Recurring donation ID */
    public var id: String
    /** Next donation datetime */
    public var nextDate: Date?

    public init(accountId: String, charityId: String, startDate: Date, donationAmount: Double, isPaused: Bool, isStopped: Bool, isAnonymous: Bool, coverFees: Bool, id: String, nextDate: Date? = nil) {
        self.accountId = accountId
        self.charityId = charityId
        self.startDate = startDate
        self.donationAmount = donationAmount
        self.isPaused = isPaused
        self.isStopped = isStopped
        self.isAnonymous = isAnonymous
        self.coverFees = coverFees
        self.id = id
        self.nextDate = nextDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId
        case charityId
        case startDate
        case donationAmount
        case isPaused
        case isStopped
        case isAnonymous
        case coverFees
        case id
        case nextDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(charityId, forKey: .charityId)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(donationAmount, forKey: .donationAmount)
        try container.encode(isPaused, forKey: .isPaused)
        try container.encode(isStopped, forKey: .isStopped)
        try container.encode(isAnonymous, forKey: .isAnonymous)
        try container.encode(coverFees, forKey: .coverFees)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(nextDate, forKey: .nextDate)
    }
}

