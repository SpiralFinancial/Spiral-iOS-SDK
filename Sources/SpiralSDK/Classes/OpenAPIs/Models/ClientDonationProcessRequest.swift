//
// ClientDonationProcessRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ClientDonationProcessRequest: Codable, JSONEncodable, Hashable {

    public var action: OperationsCenterAction
    /** The search start timestamp. */
    public var from: Double?
    /** The search end timestamp. */
    public var to: Double?
    /** Search query; filters donation descriptions, EINs or customer names in a case-insensitive way. */
    public var query: String?
    /** A list of charity IDs to include in the search. Defaults to all units if not provided. */
    public var charities: [String]?
    /** List of donation IDs to process. Optional, but if provided will overwrite the supplied filters and only process these donation IDs. */
    public var donations: [String]?
    public var type: SummaryDonationType?
    /** Transaction statuses to include. Defaults to all statuses if not provided. */
    public var status: [OperationalStatus]?

    public init(action: OperationsCenterAction, from: Double? = nil, to: Double? = nil, query: String? = nil, charities: [String]? = nil, donations: [String]? = nil, type: SummaryDonationType? = nil, status: [OperationalStatus]? = nil) {
        self.action = action
        self.from = from
        self.to = to
        self.query = query
        self.charities = charities
        self.donations = donations
        self.type = type
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case action
        case from
        case to
        case query
        case charities
        case donations
        case type
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(action, forKey: .action)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(query, forKey: .query)
        try container.encodeIfPresent(charities, forKey: .charities)
        try container.encodeIfPresent(donations, forKey: .donations)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

