//
// SocialResponsibilityInstantImpactSummaryItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Customer&#39;s Instant Impact summary report per unit */
public struct SocialResponsibilityInstantImpactSummaryItem: Codable, JSONEncodable, Hashable {

    /** Spiral Reward Unit id */
    public var rewardUnitId: String?
    /** Reward unit name */
    public var rewardUnitName: String
    /** Title label text for associated reward unit */
    public var rewardUnitTitle: String?
    /** Subtitle label text for associated reward unit */
    public var rewardUnitSubtitle: String?
    /** URL for reward unit icon */
    public var rewardUnitIcon: String?
    /** Aggregated point value for associated reward unit */
    public var totalImpact: Double?
    /** Aggregated dollar value for associated reward unit */
    public var totalDonatedAmount: Double?

    public init(rewardUnitId: String? = nil, rewardUnitName: String, rewardUnitTitle: String? = nil, rewardUnitSubtitle: String? = nil, rewardUnitIcon: String? = nil, totalImpact: Double? = nil, totalDonatedAmount: Double? = nil) {
        self.rewardUnitId = rewardUnitId
        self.rewardUnitName = rewardUnitName
        self.rewardUnitTitle = rewardUnitTitle
        self.rewardUnitSubtitle = rewardUnitSubtitle
        self.rewardUnitIcon = rewardUnitIcon
        self.totalImpact = totalImpact
        self.totalDonatedAmount = totalDonatedAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rewardUnitId
        case rewardUnitName
        case rewardUnitTitle
        case rewardUnitSubtitle
        case rewardUnitIcon
        case totalImpact
        case totalDonatedAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(rewardUnitId, forKey: .rewardUnitId)
        try container.encode(rewardUnitName, forKey: .rewardUnitName)
        try container.encodeIfPresent(rewardUnitTitle, forKey: .rewardUnitTitle)
        try container.encodeIfPresent(rewardUnitSubtitle, forKey: .rewardUnitSubtitle)
        try container.encodeIfPresent(rewardUnitIcon, forKey: .rewardUnitIcon)
        try container.encodeIfPresent(totalImpact, forKey: .totalImpact)
        try container.encodeIfPresent(totalDonatedAmount, forKey: .totalDonatedAmount)
    }
}

