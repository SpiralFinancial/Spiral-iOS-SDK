//
// DonorInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Donor details, for receipt purposes. */
public struct DonorInformation: Codable, JSONEncodable, Hashable {

    /** Donor's first name */
    public var firstName: String
    /** Donor's last name */
    public var lastName: String
    /** Donor's email */
    public var email: String
    /** Donor's city */
    public var city: String
    /** Donor's country */
    public var country: String
    /** Donor's address line 1 */
    public var addressLine1: String
    /** Donor's address line 2 */
    public var addressLine2: String?
    /** Donor's email */
    public var state: String
    /** Donor's zip code */
    public var zip: String

    public init(firstName: String, lastName: String, email: String, city: String, country: String, addressLine1: String, addressLine2: String? = nil, state: String, zip: String) {
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.city = city
        self.country = country
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.state = state
        self.zip = zip
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case email
        case city
        case country
        case addressLine1
        case addressLine2
        case state
        case zip
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(email, forKey: .email)
        try container.encode(city, forKey: .city)
        try container.encode(country, forKey: .country)
        try container.encode(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encode(state, forKey: .state)
        try container.encode(zip, forKey: .zip)
    }
}

