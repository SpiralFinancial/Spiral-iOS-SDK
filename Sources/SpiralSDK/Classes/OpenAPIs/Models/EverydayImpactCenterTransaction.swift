//
// EverydayImpactCenterTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EverydayImpactCenterTransaction: Codable, JSONEncodable, Hashable {

    public var categoryId: String
    public var customerId: String?
    /** Name of the charity category. */
    public var categoryName: String
    public var rewardUnit: CharityRewardUnit?
    /** Point value for associated Impact Category Unit. */
    public var impactUnits: Double
    /** Total amount collected from the customer, including all fees. */
    public var collectedAmount: Double?
    /** Dollar value donated to Impact Category Charity. */
    public var donatedAmount: Double?
    /** Amount withheld for processing fees. */
    public var feesWithheldAmount: Double?
    /** Amount collected for external processing fees. */
    public var externalFeeAmount: Double?
    /** Amount collected for internal processing fees. */
    public var internalFeeAmount: Double?
    /** Dollar value of how much was rounded up */
    public var roundupAmount: Double?
    /** Permanent, unique transaction identifier. Must survive changes to pending status or amount. */
    public var transactionId: String?
    /** Date and time at which transaction was made */
    public var transactedAtDate: Date?
    /** Date and time at which transaction settled */
    public var settledAtDate: Date?
    /** The cleaned up transaction title. */
    public var transactionTitle: String?
    /** The type or source of the transaction */
    public var transactionType: String?
    /** Detailed transaction description, like it would appear in your statement. */
    public var statementDescription: String?
    /** Transaction amount with two decimal places. */
    public var transactionAmount: Double?
    /** Transaction account identifier. */
    public var accountId: String?
    /** Point value for cumulative impact (units) at the time of transaction */
    public var cumulativeImpactUnits: Double?
    /** Point value for one unit progress for that transaction. Can be >1 if transaction earned more than 1 unit. */
    public var cumulativeProgressUnits: Double?

    public init(categoryId: String, customerId: String? = nil, categoryName: String, rewardUnit: CharityRewardUnit? = nil, impactUnits: Double, collectedAmount: Double? = nil, donatedAmount: Double? = nil, feesWithheldAmount: Double? = nil, externalFeeAmount: Double? = nil, internalFeeAmount: Double? = nil, roundupAmount: Double? = nil, transactionId: String? = nil, transactedAtDate: Date? = nil, settledAtDate: Date? = nil, transactionTitle: String? = nil, transactionType: String? = nil, statementDescription: String? = nil, transactionAmount: Double? = nil, accountId: String? = nil, cumulativeImpactUnits: Double? = nil, cumulativeProgressUnits: Double? = nil) {
        self.categoryId = categoryId
        self.customerId = customerId
        self.categoryName = categoryName
        self.rewardUnit = rewardUnit
        self.impactUnits = impactUnits
        self.collectedAmount = collectedAmount
        self.donatedAmount = donatedAmount
        self.feesWithheldAmount = feesWithheldAmount
        self.externalFeeAmount = externalFeeAmount
        self.internalFeeAmount = internalFeeAmount
        self.roundupAmount = roundupAmount
        self.transactionId = transactionId
        self.transactedAtDate = transactedAtDate
        self.settledAtDate = settledAtDate
        self.transactionTitle = transactionTitle
        self.transactionType = transactionType
        self.statementDescription = statementDescription
        self.transactionAmount = transactionAmount
        self.accountId = accountId
        self.cumulativeImpactUnits = cumulativeImpactUnits
        self.cumulativeProgressUnits = cumulativeProgressUnits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categoryId
        case customerId
        case categoryName
        case rewardUnit
        case impactUnits
        case collectedAmount
        case donatedAmount
        case feesWithheldAmount
        case externalFeeAmount
        case internalFeeAmount
        case roundupAmount
        case transactionId
        case transactedAtDate
        case settledAtDate
        case transactionTitle
        case transactionType
        case statementDescription
        case transactionAmount
        case accountId
        case cumulativeImpactUnits
        case cumulativeProgressUnits
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encode(categoryName, forKey: .categoryName)
        try container.encodeIfPresent(rewardUnit, forKey: .rewardUnit)
        try container.encode(impactUnits, forKey: .impactUnits)
        try container.encodeIfPresent(collectedAmount, forKey: .collectedAmount)
        try container.encodeIfPresent(donatedAmount, forKey: .donatedAmount)
        try container.encodeIfPresent(feesWithheldAmount, forKey: .feesWithheldAmount)
        try container.encodeIfPresent(externalFeeAmount, forKey: .externalFeeAmount)
        try container.encodeIfPresent(internalFeeAmount, forKey: .internalFeeAmount)
        try container.encodeIfPresent(roundupAmount, forKey: .roundupAmount)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(transactedAtDate, forKey: .transactedAtDate)
        try container.encodeIfPresent(settledAtDate, forKey: .settledAtDate)
        try container.encodeIfPresent(transactionTitle, forKey: .transactionTitle)
        try container.encodeIfPresent(transactionType, forKey: .transactionType)
        try container.encodeIfPresent(statementDescription, forKey: .statementDescription)
        try container.encodeIfPresent(transactionAmount, forKey: .transactionAmount)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(cumulativeImpactUnits, forKey: .cumulativeImpactUnits)
        try container.encodeIfPresent(cumulativeProgressUnits, forKey: .cumulativeProgressUnits)
    }
}

