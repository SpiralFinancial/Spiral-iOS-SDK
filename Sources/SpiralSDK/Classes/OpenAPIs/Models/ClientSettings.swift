//
// ClientSettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ClientSettings: Codable, JSONEncodable, Hashable {

    /** Hierarchical order of brand colors in HTML/CSS values */
    public var brandColors: [String]?
    public var rewardSettings: RewardSettings
    public var customerLimits: CustomerLimits
    public var rewardCategorySelections: [ImpactCategoryRewardSelection]?
    public var givingSettings: ClientGivingSettings
    public var fonts: ClientFonts?

    public init(brandColors: [String]? = nil, rewardSettings: RewardSettings, customerLimits: CustomerLimits, rewardCategorySelections: [ImpactCategoryRewardSelection]? = nil, givingSettings: ClientGivingSettings, fonts: ClientFonts? = nil) {
        self.brandColors = brandColors
        self.rewardSettings = rewardSettings
        self.customerLimits = customerLimits
        self.rewardCategorySelections = rewardCategorySelections
        self.givingSettings = givingSettings
        self.fonts = fonts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brandColors
        case rewardSettings
        case customerLimits
        case rewardCategorySelections
        case givingSettings
        case fonts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brandColors, forKey: .brandColors)
        try container.encode(rewardSettings, forKey: .rewardSettings)
        try container.encode(customerLimits, forKey: .customerLimits)
        try container.encodeIfPresent(rewardCategorySelections, forKey: .rewardCategorySelections)
        try container.encode(givingSettings, forKey: .givingSettings)
        try container.encodeIfPresent(fonts, forKey: .fonts)
    }
}

