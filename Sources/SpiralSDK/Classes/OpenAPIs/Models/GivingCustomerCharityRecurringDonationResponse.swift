//
// GivingCustomerCharityRecurringDonationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GivingCustomerCharityRecurringDonationResponse: Codable, JSONEncodable, Hashable {

    /** Donation ID */
    public var id: String
    /** Spiral Charity ID */
    public var charityId: String
    /** Recurring donations icon url */
    public var iconUrl: String?
    /** Recurring donation amount */
    public var amount: Double
    /** Next donation timestamp */
    public var nextDonationTimestamp: Double?
    /** Is charity recurring donation paused */
    public var paused: Bool
    /** Is charity recurring donation stopped */
    public var stopped: Bool

    public init(id: String, charityId: String, iconUrl: String? = nil, amount: Double, nextDonationTimestamp: Double? = nil, paused: Bool, stopped: Bool) {
        self.id = id
        self.charityId = charityId
        self.iconUrl = iconUrl
        self.amount = amount
        self.nextDonationTimestamp = nextDonationTimestamp
        self.paused = paused
        self.stopped = stopped
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case charityId
        case iconUrl
        case amount
        case nextDonationTimestamp
        case paused
        case stopped
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(charityId, forKey: .charityId)
        try container.encodeIfPresent(iconUrl, forKey: .iconUrl)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(nextDonationTimestamp, forKey: .nextDonationTimestamp)
        try container.encode(paused, forKey: .paused)
        try container.encode(stopped, forKey: .stopped)
    }
}

