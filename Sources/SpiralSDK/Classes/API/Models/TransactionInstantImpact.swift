//
// TransactionInstantImpact.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A single socially responsible Instant Impact from performing a financial transaction. */
public struct TransactionInstantImpact: Codable, JSONEncodable, Hashable {

    public var categoryId: String
    /** Name of the charity category. */
    public var categoryName: String
    public var rewardUnit: CharityRewardUnit?
    /** Point value for associated Instant Impact Category. */
    public var impact: Double
    /** Dollar value for associated Instant Impact Category. */
    public var donatedAmount: Double?
    /** Permanent, unique transaction identifier. Must survive changes to pending status or amount. */
    public var transactionId: String?

    public init(categoryId: String, categoryName: String, rewardUnit: CharityRewardUnit? = nil, impact: Double, donatedAmount: Double? = nil, transactionId: String? = nil) {
        self.categoryId = categoryId
        self.categoryName = categoryName
        self.rewardUnit = rewardUnit
        self.impact = impact
        self.donatedAmount = donatedAmount
        self.transactionId = transactionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categoryId
        case categoryName
        case rewardUnit
        case impact
        case donatedAmount
        case transactionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encode(categoryName, forKey: .categoryName)
        try container.encodeIfPresent(rewardUnit, forKey: .rewardUnit)
        try container.encode(impact, forKey: .impact)
        try container.encodeIfPresent(donatedAmount, forKey: .donatedAmount)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
    }
}

